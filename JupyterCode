Tip: Welcome to the Investigate a Dataset project! You will find tips in quoted sections like this to help organize your approach to your investigation. Once you complete this project, remove these Tip sections from your report before submission. First things first, you might want to double-click this Markdown cell and change the title so that it reflects your dataset and investigation.

Project: Investigate a Dataset - TMDb Movies Dataset
Table of Contents
Introduction
Data Wrangling
Exploratory Data Analysis
Conclusions

Question(s) for Analysis
I have 3 questions regarding the dataset,

Q1: Does the vote average affected be the vote average?

Q2: What is the relationship between vote average and release year, does people like old or new movies more?

Q3: What is the relation between the length of the movie (runtime) and vote average?

Q4: How is the data varied in terms of rease year?


Data Wrangling
​
​
# 1- Data gathering and loading into Jupyter
df = pd.read_csv('tmdb-movies.csv')
​
# 2- Assesing Data
​
df.info()
sum(df.duplicated())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 10866 entries, 0 to 10865
Data columns (total 21 columns):
id                      10866 non-null int64
imdb_id                 10856 non-null object
popularity              10866 non-null float64
budget                  10866 non-null int64
revenue                 10866 non-null int64
original_title          10866 non-null object
cast                    10790 non-null object
homepage                2936 non-null object
director                10822 non-null object
tagline                 8042 non-null object
keywords                9373 non-null object
overview                10862 non-null object
runtime                 10866 non-null int64
genres                  10843 non-null object
production_companies    9836 non-null object
release_date            10866 non-null object
vote_count              10866 non-null int64
vote_average            10866 non-null float64
release_year            10866 non-null int64
budget_adj              10866 non-null float64
revenue_adj             10866 non-null float64
dtypes: float64(4), int64(6), object(11)
memory usage: 1.7+ MB
1
Data Cleaning
Tip: Make sure that you keep your reader informed on the steps that you are taking in your investigation. Follow every code cell, or every set of related code cells, with a markdown cell to describe to the reader what was found in the preceding cell(s). Try to make it so that the reader can then understand what they will be seeing in the following cell(s).

# 3- Data cleaning process by removing duplicates, null values, and unimportant columns to our analysis
​
# removing duplicate values
​
df.drop_duplicates(inplace = True)
​
# removing null values
​
df.dropna(inplace = True)
df.isnull().sum()
​
# removing unmportant columns
df.columns
#df.drop(['homepage', 'overview', 'release_date'], axis=1, inplace=True)
​
# Checking the data after the cleaning process
df.info()
df.shape
​
​
​
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1992 entries, 0 to 10819
Data columns (total 21 columns):
id                      1992 non-null int64
imdb_id                 1992 non-null object
popularity              1992 non-null float64
budget                  1992 non-null int64
revenue                 1992 non-null int64
original_title          1992 non-null object
cast                    1992 non-null object
homepage                1992 non-null object
director                1992 non-null object
tagline                 1992 non-null object
keywords                1992 non-null object
overview                1992 non-null object
runtime                 1992 non-null int64
genres                  1992 non-null object
production_companies    1992 non-null object
release_date            1992 non-null object
vote_count              1992 non-null int64
vote_average            1992 non-null float64
release_year            1992 non-null int64
budget_adj              1992 non-null float64
revenue_adj             1992 non-null float64
dtypes: float64(4), int64(6), object(11)
memory usage: 342.4+ KB
(1992, 21)

Exploratory Data Analysis
Q1: The relationship between vote average and popularity
# Use this, and more code cells, to explore your data. Don't forget to add
#   Markdown cells to document your observations and findings.
df.plot(x='vote_average',y='popularity', kind='scatter')
plt.title('Vote Average vs Popularity')
​
#This indicates a strong positive correlation between vote average and popularity, we can say almost it is the same thing
Text(0.5,1,'Vote Average vs Popularity')

Q2: The relationship between vote average and release year, does people like old or new movies more?
# Continue to explore the data to address your additional research
#   questions. Add more headers as needed if you have more questions to
#   investigate.
df.plot(x='vote_average',y='release_year', kind='scatter')
plt.title('Vote Average vs Release Year')
​
# It is strange but fascinating that the votes is higher with older movies
Text(0.5,1,'Vote Average vs Release Year')

# Q3: The relation between the length of the movie (runtime) and vote average
df.plot(x='vote_average',y='runtime', kind='scatter')
plt.title('Vote Average vs Runtime')
​
# most of more than 3 hours movies have better voting comparing to around 1.5 hours movies.
Text(0.5,1,'Vote Average vs Runtime')

# Q4: How is the data varied in terms of release year?
​
df['release_year'].hist()
plt.title('Release year variance in our data')
​
df['release_year'].describe()
​
# It is clear that most of the movies in our dataset released between 2005 and 2015, especially in the period after 2010 to 2015
count    1992.000000
mean     2007.796687
std         7.549224
min      1961.000000
25%      2006.000000
50%      2010.000000
75%      2012.000000
max      2015.000000
Name: release_year, dtype: float64

# Q5: what is the mean voting for a specific genres
​
# Function to calculate the mean vote for a specific genres 
​
def mean_genres_rate(x):
    df_genres=df[df['genres'] == x]
    g=df_genres.groupby('genres')['vote_average'].mean()
    
    print(g)
   
   
​
​
mean_genres_rate('Western')
​
​
genres
Western    6.8
Name: vote_average, dtype: float64

Conclusions
1- There is a strong positive correlation between vote average and popularity, we can say almost it is the same thing.

2- It is strange but fascinating that the votes is higher with older movies, this requires further investigation to reach the root cause as people may dislike present movies due to disliking their stars only. While for old movies most of the stars died so their private life doesn't affect the popularity of the movie.

3- Most of more than 3 hours movies have better voting comparing to around 1.5 hours movies, so as an advise for producers people generally likes movies around 3 hours rather than short movies.

4- Most of the movies in our dataset released between 2005 and 2015, especially in the period after 2010. So we can't rely on this dataset to have insigts on older movies.

Limitations
Most of the limitations I faced in the analysis was due to many rows contain null values, which I dropped and have much less data to work on.

Most of the movies are modern movies so we can't have clear insigts on older movies.

from subprocess import call
call(['python', '-m', 'nbconvert', 'Investigate_a_Dataset.ipynb'])
0
